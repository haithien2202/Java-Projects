#BlueJ class context
comment0.target=MorseCode
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\r\n\ Setup\ the\ GUI\ and\ creates\ the\ morse\ code\ with\ characters\ up\ to\ 2\ symbols\r\n
comment10.params=
comment10.target=void\ printTree()
comment11.params=current\ x\ y
comment11.target=void\ drawTree(Character,\ java.lang.String,\ java.lang.String)
comment12.params=current\ x\ y
comment12.target=void\ drawLeft(Character,\ java.lang.String,\ java.lang.String)
comment13.params=current\ x\ y
comment13.target=void\ drawRight(Character,\ java.lang.String,\ java.lang.String)
comment14.params=
comment14.target=void\ extendTreeComp()
comment15.params=
comment15.target=void\ loadAlphabet()
comment16.params=
comment16.target=void\ printGraph()
comment17.params=action\ x\ y
comment17.target=void\ doMouse(java.lang.String,\ double,\ double)
comment18.params=
comment18.target=void\ drawSlider()
comment19.params=
comment19.target=double\ calculateSpaceNeeded()
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=\r\n\ Set\ up\ the\ interface\r\n
comment20.params=current\ level
comment20.target=void\ find(Character,\ int)
comment21.params=current\ x\ y\ diff
comment21.target=void\ drawLine(Character,\ double,\ double,\ double)
comment22.params=current\ x\ y\ diff
comment22.target=void\ drawLineL(Character,\ double,\ double,\ double)
comment23.params=current\ x\ y\ diff
comment23.target=void\ drawLineR(Character,\ double,\ double,\ double)
comment24.params=current\ x\ y\ diff
comment24.target=void\ drawGraph(Character,\ double,\ double,\ double)
comment25.params=current\ x\ y\ diff
comment25.target=void\ drawLeft(Character,\ double,\ double,\ double)
comment26.params=current\ x\ y\ diff
comment26.target=void\ drawRight(Character,\ double,\ double,\ double)
comment27.params=
comment27.target=void\ encode()
comment28.params=current\ letter\ code
comment28.target=void\ findLetter(Character,\ java.lang.String,\ java.lang.String)
comment29.params=current\ letter\ code
comment29.target=void\ searchLeft(Character,\ java.lang.String,\ java.lang.String)
comment3.params=
comment3.target=void\ makeBasicTree()
comment3.text=\r\n\ Makes\ an\ initial\ tree\ with\ the\ 6\ characters\ that\ have\ at\ most\ 2\ symbols.\r\n
comment30.params=current\ letter\ code
comment30.target=void\ searchRight(Character,\ java.lang.String,\ java.lang.String)
comment4.params=
comment4.target=void\ decode()
comment4.text=\r\n\ Run\ the\ tree\ by\ starting\ at\ the\ top\ (root),\ and\ working\r\n\ down\ the\ tree\ following\ the\ dash\ or\ dot\ nodes\ according\ to\ the\r\n\ given\ sequence.\r\n\ FOR\ CORE\:\ you\ may\ assume\ that\ the\ code\ entered\ exists\ in\ the\ tree\r\n\ FOR\ COMPLETION\:\ your\ program\ needs\ to\ be\ more\ robust\r\n
comment5.params=
comment5.target=java.lang.String\ askForChar()
comment6.params=code
comment6.target=boolean\ isValidCode(java.lang.String)
comment7.params=
comment7.target=void\ extendTreeCore()
comment8.params=letter\ code
comment8.target=void\ add(java.lang.String,\ java.lang.String)
comment9.params=letter\ code
comment9.target=void\ add1(java.lang.String,\ java.lang.String)
numComments=31
