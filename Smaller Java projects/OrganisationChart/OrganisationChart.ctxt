#BlueJ class context
comment0.target=OrganisationChart
comment0.text=\ <description\ of\ class\ OrganisationChart>\r\n
comment1.params=
comment1.target=void\ setupGUI()
comment1.text=\r\n\ Set\ up\ the\ GUI\ (buttons\ and\ mouse)\r\n
comment10.params=x\ y\ pos
comment10.target=Position\ findPosition(double,\ double,\ Position)
comment10.text=\ \r\n\ Find\ and\ return\ a\ Position\ that\ is\ currently\ placed\ over\ the\ point\ (x,y).\ \r\n\ Must\ do\ a\ recursive\ search\ of\ the\ subtree\ whose\ root\ is\ the\ given\ Position.\r\n\ [STEP\ 2\:]\ \r\n\ \ \ \ Returns\ a\ Position\ if\ it\ finds\ one,\r\n\ \ \ \ Returns\ null\ if\ it\ doesn't.\r\n\ [Completion\:]\ If\ (x,y)\ is\ under\ two\ Positions,\ it\ should\ return\ the\ top\ one.\r\n
comment11.params=x\ y\ pos
comment11.target=void\ findingPosition(double,\ double,\ Position)
comment12.params=newPos\ target
comment12.target=void\ addNewPosition(Position,\ Position)
comment12.text=\ [STEP\ 2\:]\ \r\n\ Add\ the\ new\ position\ to\ the\ target's\ team.\r\n\ Check\ the\ arguments\ are\ valid\ first.\r\n
comment13.params=pos\ target
comment13.target=void\ movePosition(Position,\ Position)
comment13.text=\ [STEP\ 2\:]\ \r\n\ \ \ \ Move\ a\ current\ position\ (pos)\ to\ another\ position\ (target)\r\n\ \ \ \ by\ adding\ the\ position\ to\ the\ team\ of\ the\ target,\r\n\ \ \ \ (and\ bringing\ the\ whole\ subtree\ of\ the\ position\ with\ them)\r\n\ \ \ \ Check\ the\ arguments\ are\ valid\ first.\r\n\r\n\ [COMPLETION\:]\r\n\ \ \ Moving\ any\ position\ to\ a\ target\ that\ is\ in\ the\r\n\ \ \ position's\ subtree\ is\ a\ problem\ and\ should\ not\ be\ allowed.\ (Why?)\r\n\ \ \ (one\ consequence\ is\ that\ the\ CEO\ position\ can't\ be\ moved\ at\ all)\r\n
comment14.params=pos\ target
comment14.target=boolean\ isExisted(Position,\ Position)
comment15.params=pos
comment15.target=void\ removePosition(Position)
comment15.text=\ [STEP\ 2\:]\r\n\ Remove\ a\ position\ by\ removing\ it\ from\ the\ tree\ completely.\r\n\ The\ position\ cannot\ be\ a\ manager\ of\ another\ position.\r\n\ If\ this\ removes\ the\ current\ selected\ position,\ then\ there\r\n\ \ should\ now\ be\ no\ selected\ position\r\n
comment16.params=pos\ subtree
comment16.target=boolean\ inSubtree(Position,\ Position)
comment16.text=\ [COMPLETION\:]\r\n\ Return\ true\ if\ position\ is\ in\ the\ subtree,\ and\ false\ otherwise\r\n\ Uses\ \=\=\ to\ determine\ node\ equality\r\n\ \ Check\ if\ positition\ is\ the\ same\ as\ the\ root\ of\ subTree\r\n\ \ if\ not,\ check\ if\ in\ any\ of\ the\ subtrees\ of\ the\ team\ members\ of\ the\ root\r\n\ \ (recursive\ call,\ which\ must\ return\ true\ if\ it\ finds\ the\ position)\r\n
comment17.params=pos\ subtree
comment17.target=void\ isSubtree(Position,\ Position)
comment18.params=
comment18.target=void\ redraw()
comment18.text=\r\n\ Redraw\ the\ entire\ organisation\ chart.\r\n
comment19.params=
comment19.target=void\ fixPos()
comment2.params=
comment2.target=void\ initialiseChart()
comment2.text=\r\n\ initialise\ the\ root\ of\ the\ organisation\r\n
comment20.params=pos\ team1\ index
comment20.target=void\ fixPosition(Position,\ java.util.List,\ int)
comment21.params=x\ y\ drag
comment21.target=void\ redrawDragging(double,\ double,\ boolean)
comment22.params=
comment22.target=void\ drawNewIcon()
comment22.text=\r\n\ Redraw\ the\ new\ Person\ box\r\n
comment23.params=
comment23.target=void\ drawRetireIcon()
comment23.text=\r\n\ Redraw\ the\ remove\ Icon\r\n
comment24.params=x\ y
comment24.target=boolean\ onNewIcon(double,\ double)
comment24.text=is\ the\ mouse\ position\ on\ the\ New\ Position\ box
comment25.params=x\ y
comment25.target=boolean\ onRemoveIcon(double,\ double)
comment25.text=is\ the\ mouse\ position\ on\ the\ remove\ icon
comment26.params=
comment26.target=void\ makeTestTree()
comment26.text=\r\n\ Makes\ an\ initial\ tree\ so\ you\ can\ test\ your\ program\r\n
comment27.params=posn\ indent
comment27.target=void\ printTree(Position,\ java.lang.String)
comment28.params=arguments
comment28.target=void\ main(java.lang.String[])
comment29.params=
comment29.target=void\ reset()
comment3.params=v
comment3.target=void\ setRole(java.lang.String)
comment3.text=If\ a\ Position\ has\ been\ selected,\ update\ the\ name\ of\ the\ role\ of\ this\ position
comment4.params=
comment4.target=void\ saveFile()
comment5.params=pos\ checkend\ checkManager\ printWriter
comment5.target=void\ makeString(Position,\ boolean,\ boolean,\ java.io.PrintWriter)
comment6.params=
comment6.target=void\ loadFile()
comment7.params=pos\ target\ offset
comment7.target=void\ addPos(Position,\ Position,\ double)
comment8.params=action\ x\ y
comment8.target=void\ doMouse(java.lang.String,\ double,\ double)
comment8.text=\r\n\ Most\ of\ the\ work\ is\ initiated\ by\ the\ mouse.\r\n\ \r\n\ The\ action\ depends\ on\ where\ the\ mouse\ is\ pressed\:\r\n\ \ \ on\ the\ new\ icon,\r\n\ \ \ a\ Position\ in\ the\ tree,\ or\r\n\ and\ where\ it\ is\ released\:\r\n\ \ \ on\ the\ same\ Position,\r\n\ \ \ another\ Position\ in\ the\ tree,\r\n\ \ \ on\ the\ delete\ Icon,\ or\r\n\ \ \ empty\ space\r\n\ \r\n\ See\ the\ table\ in\ the\ assignment\ description.\r\n\ The\ method\ follows\ the\ structure\ of\ the\ table.\r\n
comment9.params=pos
comment9.target=void\ drawTree(Position)
comment9.text=\ [STEP\ 1\:]\r\n\ \ Recursive\ method\ to\ draw\ all\ nodes\ in\ a\ subtree,\ given\ the\ root\ node.\r\n\ \ (The\ provided\ code\ just\ draws\ the\ root\ node;\r\n\ \ you\ need\ to\ make\ it\ draw\ all\ the\ nodes.)\r\n
numComments=30
